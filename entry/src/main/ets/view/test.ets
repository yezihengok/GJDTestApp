// let NextID: number = 1;
//
// @Observed
// class ClassA {
//   public id: number;
//   public c: number;
//
//   constructor(c: number) {
//     this.id = NextID++;
//     this.c = c;
//   }
// }
//
// @Component
// struct ViewA {
//   // 子组件ViewA的@ObjectLink的类型是ClassA
//
//   @ObjectLink a: Array<ClassA>;
//   label: string = 'ViewA1';
//
//   build() {
//     Row() {
//       Button(`ViewA [${this.label}] this.a.c = ${this.a ? this.a.c : "undefined"}`)
//         .onClick(() => {
//           this.a.c += 1;
//         })
//     }
//   }
// }
//
// @Entry
// @Component
// struct ViewB {
//   // ViewB中有@State装饰的ClassA[]
//   @State arrA: ClassA[] = [new ClassA(0), new ClassA(0)];
//
//   build() {
//     Column() {
//       ForEach(this.arrA,
//         (item: ClassA) => {
//           ViewA({ label: `#${item.id}`, a: item })
//         },
//         (item: ClassA): string => item.id.toString()
//       )
//       // 使用@State装饰的数组的数组项初始化@ObjectLink，其中数组项是被@Observed装饰的ClassA的实例
//       ViewA({ label: `ViewA this.arrA[first]`, a: this.arrA[0] })
//       ViewA({ label: `ViewA this.arrA[last]`, a: this.arrA[this.arrA.length-1] })
//
//       Button(`ViewB: reset array`)
//         .onClick(() => {
//           this.arrA = [new ClassA(0), new ClassA(0)];
//         })
//       Button(`ViewB: push`)
//         .onClick(() => {
//           this.arrA.push(new ClassA(0))
//         })
//       Button(`ViewB: shift`)
//         .onClick(() => {
//           if (this.arrA.length > 0) {
//             this.arrA.shift()
//           } else {
//             console.log("length <= 0")
//           }
//         })
//       Button(`ViewB: chg item property in middle`)
//         .onClick(() => {
//           this.arrA[Math.floor(this.arrA.length / 2)].c = 10;
//         })
//       Button(`ViewB: chg item property in middle`)
//         .onClick(() => {
//           this.arrA[Math.floor(this.arrA.length / 2)] = new ClassA(11);
//         })
//     }
//   }
// }
